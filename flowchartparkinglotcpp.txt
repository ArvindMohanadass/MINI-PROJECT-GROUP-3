digraph G {
    node [shape=record];

    ParkingLot [label="{ ParkingLot | +totalRevenue: double | +spots: list<ParkingSpot> | +reserveSpot(spotId: string, plateNumber: string): bool | +releaseSpot(spotId: string): bool | +checkInSpot(spotId: string, plateNumber: string): bool | +checkOutSpot(spotId: string, plateNumber: string): bool | +calculateRevenue(): double | +displayAvailableSpots(): void | +addParkingSpot(spotId: string, hourlyRate: double): void | +removeParkingSpot(spotId: string): void | +findAvailableSpot(): string | +endProgram(): void | +saveToCSV(filename: string): void | +loadFromCSV(filename: string): void | +checkReservations(): void | +trackRevenue(plateNumber: string, amount: double): void | +displayRevenue(): void | +handleUserInput(): void | +handleAdminInput(): void }"];

    UserInputHandler [label="{ UserInputHandler | +handleUserInput(parkingLot: ParkingLot): void }"];
    AdminInputHandler [label="{ AdminInputHandler | +handleAdminInput(parkingLot: ParkingLot): void }"];
    ParkingSpot [label="{ ParkingSpot | +id: string | +isReserved: bool | +isCheckedIn: bool | +hourlyRate: double | +plateNumber: string }"];

    ParkingLot -> UserInputHandler [label="handles"];
    ParkingLot -> AdminInputHandler [label="handles"];
    ParkingLot -> ParkingSpot [label="contains"];
}
